syntax = "proto2";

// Reports the encoder ticks for each arm joint
message ArmEncodersMessage {
  required int32 shoulderLiftTicks = 1;
  required int32 shouldSwivelTicks = 2;
  required int32 elbowLiftTicks = 3;
  required int32 elbowSwivelTicks = 4;
  required int32 wristLiftTicks = 5;
  required int32 wristSwivelTicks = 6;
}

message DriveEncodersMessage {
  optional int32 leftSpeed = 1;
  optional int32 rightSpeed = 2;
  required int32 timestamp = 3;
}

message DrivetrainRequest {
  required int32 m1Setpoint = 1;
  required int32 m2Setpoint = 2;
  required int32 m3Setpoint = 3;
  required int32 m4Setpoint = 4;
}

message DrivetrainResponse {
  required int32 m1SpeedFeedback = 1;
  required uint32 m1Current = 2;
  required int32 m1PositionFeedback = 3;
  required int32 m2SpeedFeedback = 4;
  required uint32 m2Current = 5;
  required int32 m2PositionFeedback = 6;
  required int32 m3SpeedFeedback = 7;
  required uint32 m3Current = 8;
  required int32 m3PositionFeedback = 9;
  required int32 m4SpeedFeedback = 10;
  required uint32 m4Current = 11;
  required int32 m4PositionFeedback = 12;
}

message RequestMessage {
  required bool requestSpeed = 1;
  required bool requestDiagnostics = 2;
  optional int32 leftSpeed = 3;
  optional int32 rightSpeed = 4;
  optional int32 duration = 5;
  required int32 timestamp = 6;
}

message StatusLightCommand {
  optional int32 color = 1;
  optional int32 display = 2;
}

message NewStatusLightCommand {
  required int32 redEnabled = 1;
  required int32 blueEnabled = 2;
  required int32 greenEnabled = 3;
  required int32 redBlink = 4;
  required int32 blueBlink = 5;
  required int32 greenBlink = 6;
}

// message TeensyMessage {
//     // 0 = drivetrain
//     // 1 = status light
//     required int32 messageID = 1;
//     oneof payload {
//         DrivetrainRequest driveEncodersMessage = 2;
//         NewStatusLightCommand statusLightCommand = 3;
//     }
// }

// message TeensyMessage {
//     // 0 = drivetrain
//     // 1 = status light
//     required int32 messageID = 1;
//     required DrivetrainRequest driveEncodersMessage = 2;
//     required NewStatusLightCommand statusLightCommand = 3;
// }

message StatusLightMessage {
  // required int32 lightCommand = 1;
  required int32 redEnabled = 1;
  required int32 blueEnabled = 2;
  required int32 greenEnabled = 3;
  required int32 redBlink = 4;
  required int32 blueBlink = 5;
  required int32 greenBlink = 6;
}

message SetpointMessage {
  required int32 leftSetpoint = 1;
  required int32 rightSetpoint = 2;
  /*
  required int32 m1Setpoint = 1;
  required int32 m2Setpoint = 2;
  required int32 m3Setpoint = 3;
  required int32 m4Setpoint = 4;
  required int32 m5Setpoint = 5;
  required int32 m6Setpoint = 6;
  */
}

message BatteryMessage {
  // cell voltages
  optional float mainVoltage = 1;

  optional float cell1Voltage = 2;
  optional float cell2Voltage = 3;
  optional float cell3Voltage = 4;
  optional float cell4Voltage = 5;
  optional float cell5Voltage = 6;
  optional float cell6Voltage = 7;
  optional float cell7Voltage = 8;
  optional float cell8Voltage = 9;

  // charge state
  optional float chargePercentage = 10;

  // discharge state
  optional float dischargeCurrent = 11;
}

message IMUMessage {
  required int32 timestamp = 1;

  optional float quaternionX = 2;
  optional float quaternionY = 3;
  optional float quaternionZ = 4;
  optional float quaternionW = 5;

  optional float linearAccelX = 6;
  optional float linearAccelY = 7;
  optional float linearAccelZ = 8;

  optional float angularVelocityX = 9;
  optional float angularVelocityY = 10;
  optional float angularVelocityZ = 11;
}

message ScienceModuleCommand { required int32 rotateTurntable = 1; }

message TeensyMessage {
  // 0 = drivetrain
  // 1 = status light
  oneof messageType {
    StatusLightMessage statusLightMessage = 1;
    SetpointMessage setpointMessage = 2;
  }
  /*
  required int32 messageID = 1;
  required int32 m1Setpoint           = 2;
  required int32 m2Setpoint           = 3;
  required int32 m3Setpoint           = 4;
  required int32 m4Setpoint           = 5;
  required int32 redEnabled = 8;
  required int32 blueEnabled = 9;
  required int32 greenEnabled = 10;
  required int32 redBlink = 11;
  required int32 blueBlink = 12;
  required int32 greenBlink = 13;
  */
}

message ArmClawRequest { optional int32 clawVel = 1; }

message ArmEffortRequest {
  optional int32 shoulderLiftEffort = 1;
  optional int32 shoulderSwivelEffort = 2;
  optional int32 elbowLiftEffort = 3;
  optional int32 wristLiftEffort = 4;
  optional int32 wristSwivelEffort = 5;
  optional int32 clawVel = 6;
}

message ArmPositionFeedback {
  optional int32 shoulderLiftTicks = 1;
  optional int32 shoulderSwivelTicks = 2;
  optional int32 elbowLiftTicks = 3;
  optional int32 wristLiftTicks = 4;
  optional int32 wristSwivelTicks = 5;
}

message ScienceMotorRequest {
  optional int32 leadscrewVel = 1;
  optional int32 turntableVel = 2;
  optional int32 drillEffort = 3;
}
